name: Master workflow
on:
  push:
    branches:
      - master
jobs:
  minikube:
    name: minikube
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Install minikube
        id: install-minikube
        run: |
          brew install minikube hyperkit docker
          echo "cache-key=$(minikube version | md5)" >> $GITHUB_ENV
      - name: Cache minikube
        uses: actions/cache@v2
        with:
          path: |
            ~/.minikube/cache
            ~/.minikube/bin
          key: ${{ runner.os }}-minikube-${{ steps.install-minikube.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-minikube-
      - name: Start minikube
        run: |
          minikube start --vm-driver hyperkit --wait all
          minikube docker-env | sed '/^#/d;s/="\(.*\)"/=\1/g;s/export //g' >> $GITHUB_ENV
      - name: Run in minikube
        run: |
          docker build . -t testing
          docker container run testing
  docker-for-mac:
    name: Docker for Mac
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Install Docker for Mac
        run: |
          brew cask install docker --no-quarantine
          sudo cp /Applications/Docker.app/Contents/Library/LaunchServices/com.docker.vmnetd /Library/PrivilegedHelperTools
          sudo cp /Applications/Docker.app/Contents/Resources/com.docker.vmnetd.plist /Library/LaunchDaemons/
          sudo chmod 544 /Library/PrivilegedHelperTools/com.docker.vmnetd
          sudo chmod 644 /Library/LaunchDaemons/com.docker.vmnetd.plist
          sudo launchctl load /Library/LaunchDaemons/com.docker.vmnetd.plist
      - name: Start Docker for Mac
        run: |
          /Applications/Docker.app/Contents/MacOS/Docker --unattended &>/dev/null &
          retries=0
          while ! docker info &>/dev/null ; do
              sleep 5
              retries=`expr ${retries} + 1`
              if pgrep -xq -- "Docker"; then
                  echo 'Docker still running'
              else
                  echo 'Docker not running, restart'
                  /Applications/Docker.app/Contents/MacOS/Docker --unattended &>/dev/null &
              fi
              if [[ ${retries} -gt 30 ]]; then
                  >&2 echo 'Failed to run Docker'
                  exit 1
              fi;
              echo 'Waiting for Docker service to be in the running state'
          done
      - name: Run in Docker for Mac
        run: |
          docker build . -t testing
          docker container run testing

